package createEnum;

/**
 * @author 张庆品
 * @version 1.0
 * @date 2020/11/6 上午 10:57
 */

/**
 * 内部类：
 * 可以调用外部类的结构
 *      如果被static修饰 不能调用外部类中的非静态成员
 * 可以被四种不同的权限修饰
 * ===============================================================================================
 *  内部类的创建
 *      因为是静态的 可以谁着类的加载而加载，这个时候就不需要依赖于外部类的实例化 可以直接创建
 *      就相当于在外部类中取找寻 Dog这个类
 *      如果是静态内部类 直接进行实例化  Person.Dog dog = new Person.Dog();
 *  非静态的
 *      这个类就不能直接加载到内存中 而是需要依赖外部类的实例化
 *      Person person  = new Person();
 *      Person.Dog dog = person.new Dog();
 *
 *=================================================================================================
 * 》普通内部类变量的访问
 * 	    》成员的访问原则
 * 		    》内部类中可以直接访问外部类的私有成员，属于类中成员之间的访问
 * 			》外部类不能直接访问内部类的私有成员，
 * 			  因为外部类存在的时候，不一定有内部类对象
 * 	   》成员优先级
 * 	        》在内部类的成员方法中，访问某个成员时，
 * 			》系统优先在该方法内部查找是否存在局部变量，
 * 			》如果不存在就查找内部类中，是否有该名字的成员变量，
 * 			》如果还不存在就查找外部类中是否有该名字的成员变量
 * 	》静态内部类
 * 	    》用static修饰的内部类叫做静态内部类
 * 		》静态内部类中可以定义静态成员变量
 * 		》静态内部类属于类级别成员，不需要外部类的对象，就可以直接访问创建内部类对象
 * 		》但是在声明或创建内部类对象时，需要加上外部类的前缀
 * 		》静态内部类的方法中，可以直接访问外部类的静态成员变量，但是不能访问外部类的普通成员变量
 *     》普通内部类和静态内部类
 * 	    》从定义方面
 * 		    》普通的内部类不可以包含静态成员，但是静态内部类可以
 * 			    》普通内部类依赖外部对象存在，静态变量是占用内存的，在编译时，只要是定义为静态变量了，
 * 				   系统就会自动分配内存给他，内部类的静态变量，先于内部类生成，这显然是不可能的
 * 		》在使用方面
 * 		    》普通内部类的成员，所以创建对象之前，必须先创建外部类对象，
 * 			》静态内部类，可以直接创建对象，只需添加外部类的前缀即可
 * 			》普通内部类可以访问，外部类的普通成员和静态成员
 * 			》静态内部类不可以访问普通成员，只可以访问外部类的静态成员
 *
 *
 * ================================================================================================
 *
 *
 *
 * 复杂的类型的枚举类
 *
 * 枚举类：
 *  枚举类中的常量代表有限多个
 *   枚举类中写内部类 针对当前的内部类 当前 当前对象仅有有限多个
 *
 */
public enum EnumPerson  {
    PERSON1(new Person("张三")),// = public static final Person person1 = new Person();
    PERSON2(new Person("李四"));

    private final Person person;

    private EnumPerson(Person person) {
        this.person = person;
    }



    private static class Person implements Info {
        private String name;
        private Person(String name) {
            this.name = name;
        }

        @Override
        public String toString() {
            return "Person{" +
                    "name='" + name + '\'' +
                    '}';
        }

        @Override
        public void show() {
            
        }
    }

    @Override
    public String toString() {
        return "EnumPerson{" +
                "person=" + person +
                '}';
    }
}
